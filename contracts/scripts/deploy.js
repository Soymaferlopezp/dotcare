// contracts\scripts\deploy.js (CommonJS + ethers v6) — despliegue adaptativo para Paseo
const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");

// Cargar .env desde la RAÍZ (dotcare\.env)
require("dotenv").config({ path: path.resolve(__dirname, "..", "..", ".env") });

async function tryDeploy(factory, ctorArgs, modeLabel, txOpts) {
  console.log(`-> Intentando deploy con modo: ${modeLabel}`, txOpts);
  const c = await factory.deploy(...ctorArgs, txOpts);
  await c.waitForDeployment();
  const address = await c.getAddress();
  console.log(`✔ Deploy OK con modo ${modeLabel}: ${address}`);
  return { contract: c, address, modeLabel, txOpts };
}

async function main() {
  const CHAIN_ID = Number(process.env.NEXT_PUBLIC_CHAIN_ID || 420420422);
  const BASE_HTTP_URI =
    process.env.NEXT_PUBLIC_BASE_HTTP_URI ||
    "https://dotcare-wellness.vercel.app/api/metadata/";
  const TREASURY = process.env.TREASURY_ADDRESS;
  const SIGNER_ADDRESS = process.env.SIGNER_ADDRESS || process.env.TREASURY_ADDRESS;

  // sanity env
  if (!TREASURY || TREASURY === "0x0000000000000000000000000000000000000000") {
    throw new Error("TREASURY_ADDRESS requerido en .env (raíz)");
  }
  if (!process.env.DEPLOYER_PRIVATE_KEY) {
    throw new Error("DEPLOYER_PRIVATE_KEY no está seteado en .env (raíz).");
  }
  if (!SIGNER_ADDRESS) {
    throw new Error("Falta SIGNER_ADDRESS en .env (pública del ADMIN_SIGNER_PRIVATE_KEY).");
  }

  // signer + balance
  const [deployer] = await ethers.getSigners();
  if (!deployer) throw new Error("No hay signer en 'paseo' (revisa hardhat.config.ts -> accounts).");

  const bal = await ethers.provider.getBalance(deployer.address);
  console.log("Deploying with:", deployer.address, "chainId:", CHAIN_ID, "balance:", bal.toString());
  if (bal === 0n) throw new Error("Balance 0. Fondea PAS testnet a la cuenta del deployer.");

  // Params del contrato
  const priceMonthlyWei = ethers.parseEther("1.0");
  const priceYearlyWei  = ethers.parseEther("10.0");
  const monthlySec = 30 * 24 * 60 * 60;
  const yearlySec  = 365 * 24 * 60 * 60;

  const Factory = await ethers.getContractFactory("SubscriptionNFT");
  const ctorArgs = [
    deployer.address, // initialOwner
    TREASURY,         // treasury
    SIGNER_ADDRESS,   // signer
    BASE_HTTP_URI,    // base HTTP URI
  ];

  // Estrategias de envío (en orden)
  // A) EIP-1559
  const tryA = { type: 2, maxFeePerGas: 3_000_000_000n, maxPriorityFeePerGas: 1_000_000_000n, gasLimit: 10_000_000n };
  // B) Legacy
  const tryB = { type: 0, gasPrice: 2_000_000_000n, gasLimit: 10_000_000n };
  // C) Sin type (que el nodo decida), solo gasLimit alto
  const tryC = { gasLimit: 10_000_000n };

  let deployed = null;
  try {
    deployed = await tryDeploy(Factory, ctorArgs, "EIP-1559(type:2)", tryA);
  } catch (e1) {
    console.warn("X Falló EIP-1559:", e1?.message || e1);
    try {
      deployed = await tryDeploy(Factory, ctorArgs, "Legacy(type:0)", tryB);
    } catch (e2) {
      console.warn("X Falló Legacy:", e2?.message || e2);
      deployed = await tryDeploy(Factory, ctorArgs, "Auto(sin type)", tryC);
    }
  }

  const { contract: c, address, txOpts, modeLabel } = deployed;

  // Post-deploy config con el mismo modo que funcionó
  async function tx(fn, label, ...args) {
    const tx = await fn(...args, txOpts);
    console.log(`   ${label} → ${tx.hash}`);
    await tx.wait(1);
  }

  await tx(c.setPrices.bind(c), "setPrices", priceMonthlyWei, priceYearlyWei);
  await tx(c.setDurations.bind(c), "setDurations", monthlySec, yearlySec);
  await tx(c.setBaseHttpURI.bind(c), "setBaseHttpURI", BASE_HTTP_URI);
  await tx(c.setTreasury.bind(c), "setTreasury", TREASURY);
  await tx(c.setSigner.bind(c), "setSigner", SIGNER_ADDRESS);

  // Guardar address para el frontend
  const root = path.resolve(__dirname, "..", ".."); // <repo root>
  const frontendPath = path.join(root, "src", "lib");
  if (!fs.existsSync(frontendPath)) fs.mkdirSync(frontendPath, { recursive: true });

  const addrFile = path.join(frontendPath, "addresses.ts");
  const content = `// AUTO-GENERATED BY contracts\\scripts\\deploy.js
export const SUBSCRIPTION_CONTRACT = "${address}";
export const CHAIN_ID = ${CHAIN_ID};
`;
  fs.writeFileSync(addrFile, content, "utf-8");
  console.log("Saved:", addrFile, " — deploy mode:", modeLabel);
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
